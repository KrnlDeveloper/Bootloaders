use16


;//////////////// Conditional compilation constants //////////////////



;//////////////// Constants //////////////////
BOOT_ADDRESS = 07C00h
STACK_ADDRESS = 09000h
SECTOR_SIZE = 512

org BOOT_ADDRESS

BootEntry:
	cli
	mov AX, CS
	mov DS, AX
	mov ES, AX
	mov SS, AX 

	mov BP, STACK_ADDRESS
	mov SP, BP

	mov [DiskId], DL
	sti

	;if-else
	push IfElseMsg
	call DbgPrint

	;char a = getchar();
	xor AX, AX
	call getchar

	;char b = getchar();
	mov BX, AX
	xor AX, AX
	call getchar

	;if(a == b)
	cmp AX, BX
	jne @f
	push EqualMsg
	call DbgPrint
	jmp Switch

	;else
@@:
	push NotEqualMsg
	call DbgPrint

Switch:
	;switch
	push SwitchMsg
	call DbgPrint

	;for
	push ForMsg
	call DbgPrint

	;for(int i = 0; i < 16; i++)

	xor CX, CX	; i = 0
	mov SI, AbcMsg

For:
	add SI, CX
	push byte [SI]
	call putc

	inc CX		; i++
	cmp CX, 15	; i < 16
	jne For

	;while
	;do-while


Exit:
	cli
	hlt



;//////////////// char getchar() //////////////////
getchar:
	xor AX, AX
	int 016h

	mov AH, 0Eh
	int 10h

	ret


;//////////////// void DbgPrint(char* Str) //////////////////
;	Str -> [BP + 4]
DbgPrint:			
	push BP
	mov BP, SP

	push SI
	push AX

	mov SI, [BP + 4]	; Str -> SI

@@:
	mov AH, 0Eh
	mov AL, [SI]
	test AL, AL
	jz @f
	int 10h
	inc SI
	jmp @b

@@:
	pop AX
	pop SI

	mov SP, BP
	pop BP
	retn 2



;//////////////// Data: Sector 1 //////////////////
DiskId db 00h

Result dw 00h

IfElseMsg db 'Dbg: if-else', 0Ah, 0Dh, 00h
SwitchMsg db 'Dbg: switch', 0Ah, 0Dh, 00h
ForMsg db 'Dbg: for', 0Ah, 0Dh, 00h
WhileMsg db 'Dbg: while', 0Ah, 0Dh, 00h
DoWhileMsg db 'Dbg: do-while', 0Ah, 0Dh, 00h

EqualMsg db 'EQUAL !', 0Ah, 0Dh, 00h
NotEqualMsg db 'NOT EQUAL', 0Ah, 0Dh, 00h
AbcMsg db 'ABCDEFGHIJKLMN', 0Ah, 0Dh, 00h

times SECTOR_SIZE - 2 - ($ - $$) db 0
db 0x55, 0xAA