use16


;//////////////// Conditional compilation constants //////////////////



;//////////////// Constants //////////////////
BOOT_ADDRESS = 07C00h
STACK_ADDRESS = 09000h
SECTOR_SIZE = 512

org BOOT_ADDRESS

BootEntry:
	cli
	mov AX, CS
	mov DS, AX
	mov ES, AX
	mov SS, AX 

	mov BP, STACK_ADDRESS
	mov SP, BP

	mov [DiskId], DL
	sti

	mov CX, Message3
    call DbgPrintFastcall

	push Message
	call DbgPrint

    push Message2
    call DbgPrintCdecl
    add SP, 2

	push 2
	push 3
	push 4
	call FunStdcall

	xor AX, AX

	push 2
	push 3
	push 4
	call FunCdecl
	add SP, 6

	xor AX, AX

	mov BX, 4
	mov CX, 3
	mov DX, 2
	call FunFastcall

	mov [Result], AX

	cmp [Result], 14
	je @f
	push NotEqualMsg
	call DbgPrint
	jmp Exit;
	@@:
	push EqualMsg
	call DbgPrint



Exit:
	cli
	hlt


;//////////////// short FunStdcall(short A, short B, short C) //////////////////
;	(A + B) * C
;	A -> [BP + 4]
;	B -> [BP + 6]
;	C -> [BP + 8]
FunStdcall:
	push BP
	mov BP, SP

	push CX
	mov CX, [BP + 4]
	add CX, [BP + 6]
	mov AX, [BP + 8]
	imul CX
	
	pop CX

	mov SP, BP
	pop BP
	retn 6


;//////////////// short FunCdecl(short A, short B, short C) //////////////////
;	(A + B) * C
;	A -> [BP + 4]
;	B -> [BP + 6]
;	C -> [BP + 8]
FunCdecl:
	push BP
	mov BP, SP

	push CX
	mov CX, [BP + 4]
	add CX, [BP + 6]
	mov AX, [BP + 8]
	imul CX
	
	pop CX

	mov SP, BP
	pop BP
	ret


;//////////////// short FunFastcall(short A, short B, short C) //////////////////
;	(A + B) * C
;	A -> BX
;	B -> CX
;	C -> DX
FunFastcall:

	add BX, CX
	mov AX, DX
	imul BX
	
	ret


;//////////////// void DbgPrint(char* Str) //////////////////
;	Str -> [BP + 4]
DbgPrint:			
	push BP
	mov BP, SP

	push SI
	push AX

	mov SI, [BP + 4]	; Str -> SI

@@:
	mov AH, 0Eh
	mov AL, [SI]
	test AL, AL
	jz @f
	int 10h
	inc SI
	jmp @b

@@:
	pop AX
	pop SI

	mov SP, BP
	pop BP
	retn 2



;//////////////// void DbgPrintCdecl(char* Str) //////////////////
;	Str -> [BP + 4]
DbgPrintCdecl:			
	push BP
	mov BP, SP

	push SI
	push AX

	mov SI, [BP + 4]	; Str -> SI

@@:
	mov AH, 0Eh
	mov AL, [SI]
	test AL, AL
	jz @f
	int 10h
	inc SI
	jmp @b

@@:
	pop AX
	pop SI

	mov SP, BP
	pop BP
	ret



;//////////////// void DbgPrintFastcall(char* Str) //////////////////
;	Str -> [CX]
DbgPrintFastcall:			
    push SI
    mov SI, CX

@@:
	mov AH, 0Eh
	mov AL, [SI]
	test AL, AL
	jz @f
	int 10h
	inc SI
	jmp @b

@@:
	pop SI

	ret


;//////////////// Data: Sector 1 //////////////////
DiskId db 00h

Result dw 00h

Message db 'Dbg: STDCALL', 0Ah, 0Dh, 00h
Message2 db 'Dbg: CDECL', 0Ah, 0Dh, 00h
Message3 db 'Dbg: FASTCALL', 0Ah, 0Dh, 00h

EqualMsg db 'EQUAL !', 0Ah, 0Dh, 00h
NotEqualMsg db 'NOT EQUAL', 0Ah, 0Dh, 00h

times SECTOR_SIZE - 2 - ($ - $$) db 0
db 0x55, 0xAA