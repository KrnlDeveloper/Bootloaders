use16


;//////////////// Conditional compilation constants //////////////////



;//////////////// Constants //////////////////
BOOT_ADDRESS = 07C00h
STACK_ADDRESS = 09000h
SECTOR_SIZE = 512

org BOOT_ADDRESS

BootEntry:
	cli
	mov AX, CS
	mov DS, AX
	mov ES, AX
	mov SS, AX 

	mov BP, STACK_ADDRESS
	mov SP, BP

	mov [DiskId], DL
	sti

; ============== if-else ==============
	push IfElseMsg
	call DbgPrint

	;char a = getchar();
	xor AX, AX
	call getchar

	push 00Ah
	call putc

	push 00Dh
	call putc

	;char b = getchar();
	mov BX, AX
	xor AX, AX
	call getchar

	;if(a == b)
	cmp AX, BX
	jne @f
	push EqualMsg
	call DbgPrint
	jmp Switch

	;else
@@:
	push NotEqualMsg
	call DbgPrint

; ============== switch ==============
Switch:

	push SwitchMsg
	call DbgPrint

	; a = getchar()
	; switch(a)
	; {
	;     case 0: putc('0'); break;
	;     ...
	;     default: printf("Unknown button");
	; }
	; printf(" is pressed\r\n");

	xor AX, AX
	call getchar

	push 00Ah
	call putc

	push 00Dh
	call putc

	cmp AL, '0'
	je Case0

	cmp AL, '1'
	je Case1

	cmp AL, '3'
	je Case3

	cmp AL, '7'
	je Case7
	jne CaseDefault

Case0:
	push '0'
	call putc

	jmp Done

Case1:
	push '1'
	call putc

	jmp Done

Case3:
	push '3'
	call putc

	jmp Done

Case7:
	push '7'
	call putc

	jmp Done

CaseDefault:
	push CaseDefaultMsg
	call DbgPrint

Done:
	push CaseMsg
	call DbgPrint

; ============== for ==============
	push ForMsg
	call DbgPrint

	; for(int i = 0; i < 16; i++)

	xor AX, AX
	xor CX, CX	; i = 0
	mov SI, AbcMsg

ForLoop:
	mov AL, [SI]
	push AX
	call putc

	inc CX		; i++
	inc SI
	cmp CX, 16	; i < 16
	jne ForLoop

; ============== for (effective) ==============
	push ForEffectiveMsg
	call DbgPrint

; ============== while ==============
	push WhileMsg
	call DbgPrint

	mov SI, AbcMsg
	xor AX, AX

	; while(str[i] != 0) {  putc(str[i]); }
WhileLoop:
	mov AL, [SI]

	cmp AL, 0		; end of line
	je @f

	push AX
	call putc

	inc SI

	jmp WhileLoop
	
@@:

; ============== do-while ==============
	push DoWhileMsg
	call DbgPrint

DoWhileLoop:
	
	; do { a = getchar(); } while(a != 'q')
	xor AX, AX
	call getchar

	cmp AL, 'q'
	jne DoWhileLoop

Exit:
	cli
	hlt



;//////////////// char getchar() //////////////////
getchar:
	xor AX, AX
	int 016h

	mov AH, 0Eh
	int 10h

	ret


;//////////////// void putc(char Ch) //////////////////
;	Str -> [BP + 4]
putc:
	push BP
	mov BP, SP

	push AX

	mov AH, 0Eh
	mov AL, [BP + 4]

	int 10h

	pop AX
	
	mov SP, BP
	pop BP

	retn 2


;//////////////// void DbgPrint(char* Str) //////////////////
;	Str -> [BP + 4]
DbgPrint:			
	push BP
	mov BP, SP

	push SI
	push AX

	mov SI, [BP + 4]	; Str -> SI

@@:
	mov AH, 0Eh
	mov AL, [SI]
	test AL, AL
	jz @f
	int 10h
	inc SI
	jmp @b

@@:
	pop AX
	pop SI

	mov SP, BP
	pop BP
	retn 2



;//////////////// Data: Sector 1 //////////////////
DiskId db 00h

Result dw 00h

IfElseMsg db 'Dbg: if-else', 0Ah, 0Dh, 00h
SwitchMsg db 'Dbg: switch', 0Ah, 0Dh, 00h
ForMsg db 'Dbg: for', 0Ah, 0Dh, 00h
ForEffectiveMsg db 'Dbg: for (effective)', 0Ah, 0Dh, 00h
WhileMsg db 'Dbg: while', 0Ah, 0Dh, 00h
DoWhileMsg db 'Dbg: do-while', 0Ah, 0Dh, 00h

EqualMsg db 0Ah, 0Dh,'EQUAL !', 0Ah, 0Dh, 00h
NotEqualMsg db 0Ah, 0Dh, 'NOT EQUAL', 0Ah, 0Dh, 00h
AbcMsg db 'ABCDEFGHIJKLMN', 0Ah, 0Dh, 00h
CaseMsg db ' is pressed', 0Ah, 0Dh, 00h
CaseDefaultMsg db 'Unknown button', 00h

times SECTOR_SIZE - 2 - ($ - $$) db 0
db 0x55, 0xAA